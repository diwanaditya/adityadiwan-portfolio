// script.js - The Engine

// GSAP Registration
gsap.registerPlugin(ScrollTrigger);

// DOM Ready
document.addEventListener('DOMContentLoaded', () => {
    initAnimations();
    init3D();
    initTilt();
    initParticles();
    initTypewriter();
    initTerminal();
    initWeb3();
    initCursor();
});

// Loading Screen
window.addEventListener('load', () => {
    const loader = document.getElementById('loader');
    loader.style.opacity = '0';
    setTimeout(() => loader.style.display = 'none', 500);
});

// Custom Cursor
function initCursor() {
    const trail = document.getElementById('cursor-trail');
    let mouseX = 0, mouseY = 0;
    
    document.addEventListener('mousemove', (e) => {
        mouseX = e.clientX;
        mouseY = e.clientY;
        trail.style.left = mouseX - 10 + 'px';
        trail.style.top = mouseY - 10 + 'px';
    });
    
    // Hover effects
    const hoverables = document.querySelectorAll('a, button, .project-card');
    hoverables.forEach(el => {
        el.addEventListener('mouseenter', () => trail.style.transform = 'scale(2)');
        el.addEventListener('mouseleave', () => trail.style.transform = 'scale(1)');
    });
}

// GSAP Scroll Animations
function initAnimations() {
    // Section reveals
    gsap.utils.toArray('section').forEach((section, i) => {
        ScrollTrigger.create({
            trigger: section,
            start: 'top 80%',
            onEnter: () => section.classList.add('visible'),
            onEnterBack: () => section.classList.add('visible'),
        });
    });

    // Nav scroll effect
    ScrollTrigger.create({
        onUpdate: self => {
            if (self.progress > 0) {
                document.querySelector('.nav-holo').classList.add('scrolled');
            } else {
                document.querySelector('.nav-holo').classList.remove('scrolled');
            }
        }
    });

    // Staggered project cards
    gsap.from('.project-card', {
        duration: 1,
        y: 100,
        opacity: 0,
        stagger: 0.2,
        ease: 'power3.out',
        scrollTrigger: {
            trigger: '.work-grid',
            start: 'top 80%'
        }
    });

    // Skill bars
    gsap.from('.skill-fill', {
        duration: 2,
        width: 0,
        stagger: 0.1,
        ease: 'power2.out',
        scrollTrigger: {
            trigger: '.skills-grid',
            start: 'top 80%'
        }
    });
}

// 3D Hero Scene with Three.js
function init3D() {
    const container = document.getElementById('three-container');
    if (!container) return;

    // Scene setup
    const scene = new THREE.Scene();
    const camera = new THREE.PerspectiveCamera(75, container.clientWidth / container.clientHeight, 0.1, 1000);
    const renderer = new THREE.WebGLRenderer({ alpha: true, antialias: true });
    
    renderer.setSize(container.clientWidth, container.clientHeight);
    renderer.setClearColor(0x000000, 0);
    container.appendChild(renderer.domElement);

    // Neon wireframe cube
    const geometry = new THREE.BoxGeometry();
    const material = new THREE.MeshBasicMaterial({ 
        color: 0x00ffff, 
        wireframe: true,
        transparent: true,
        opacity: 0.6
    });
    const cube = new THREE.Mesh(geometry, material);
    scene.add(cube);

    // Floating particles
    const particlesGeometry = new THREE.BufferGeometry();
    const particlesCount = 100;
    const posArray = new Float32Array(particlesCount * 3);

    for (let i = 0; i < particlesCount * 3; i++) {
        posArray[i] = (Math.random() - 0.5) * 10;
    }

    particlesGeometry.setAttribute('position', new THREE.BufferAttribute(posArray, 3));
    const particlesMaterial = new THREE.PointsMaterial({
        size: 0.005,
        color: 0x00ff41
    });
    const particlesMesh = new THREE.Points(particlesGeometry, particlesMaterial);
    scene.add(particlesMesh);

    camera.position.z = 5;

    // Animation loop
    function animate() {
        requestAnimationFrame(animate);
        
        cube.rotation.x += 0.01;
        cube.rotation.y += 0.01;
        particlesMesh.rotation.y += 0.002;
        
        renderer.render(scene, camera);
    }
    animate();

    // Responsive
    window.addEventListener('resize', () => {
        camera.aspect = container.clientWidth / container.clientHeight;
        camera.updateProjectionMatrix();
        renderer.setSize(container.clientWidth, container.clientHeight);
    });
}

// Vanilla Tilt for Cards
function initTilt() {
    VanillaTilt.init(document.querySelectorAll('[data-tilt]'), {
        max: 15,
        speed: 400,
        glare: true,
        'max-glare': 0.5,
        loop: true
    });
}

// Background Particles Canvas
function initParticles() {
    const canvas = document.getElementById('particles-bg');
    const ctx = canvas.getContext('2d');
    
    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;
    
    let particlesArray = [];
    const numberOfParticles = 100;

    class Particle {
        constructor() {
            this.x = Math.random() * canvas.width;
            this.y = Math.random() * canvas.height;
            this.size = Math.random() * 5 + 1;
            this.speedX = Math.random() * 3 - 1.5;
            this.speedY = Math.random() * 3 - 1.5;
        }
        update() {
            this.x += this.speedX;
            this.y += this.speedY;
            if (this.size > 0.2) this.size -= 0.1;
        }
        draw() {
            ctx.fillStyle = 'rgba(0, 255, 255, 0.3)';
            ctx.beginPath();
            ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);
            ctx.fill();
        }
    }

    function initParticlesArray() {
        for (let i = 0; i < numberOfParticles; i++) {
            particlesArray.push(new Particle());
        }
    }

    function animateParticles() {
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        for (let i = 0; i < particlesArray.length; i++) {
            particlesArray[i].update();
            particlesArray[i].draw();
            
            if (particlesArray[i].size <= 0.3) {
                particlesArray.splice(i, 1);
                i--;
                particlesArray.push(new Particle());
            }
        }
        requestAnimationFrame(animateParticles);
    }

    initParticlesArray();
    animateParticles();

    window.addEventListener('resize', () => {
        canvas.width = window.innerWidth;
        canvas.height = window.innerHeight;
    });
}

// Typewriter Effect
function initTypewriter() {
    const text = ['AI/ML ENGINEER', 'ETHICAL HACKER', 'WEB3 DEVELOPER', 'PYTHON ARCHITECT'];
    const typewriter = document.querySelector('.typewriter');
    let i = 0, j = 0, currentText = '', isDeleting = false;

    function type() {
        if (!isDeleting && j <= text[i].length) {
            currentText += text[i][j];
            typewriter.textContent = currentText;
            j++;
        } else if (isDeleting && j >= 0) {
            currentText = text[i].substring(0, j - 1);
            typewriter.textContent = currentText;
            j--;
        }

        if (!isDeleting && j === text[i].length) {
            setTimeout(() => isDeleting = true, 1000);
        } else if (isDeleting && j === 0) {
            isDeleting = false;
            i = (i + 1) % text.length;
        }

        setTimeout(type, isDeleting ? 50 : 100);
    }
    type();
}

// Terminal Contact
function initTerminal() {
    const input = document.getElementById('contact-input');
    const output = document.querySelector('.output');
    const prompt = document.querySelector('.prompt');

    input.addEventListener('keypress', (e) => {
        if (e.key === 'Enter') {
            const command = input.value.trim();
            if (command) {
                output.innerHTML += `<div>> ${command}</div>`;
                
                // Simple command responses
                if (command.toLowerCase().includes('connect') || command.toLowerCase().includes('contact')) {
                    output.innerHTML += `<div class="response">Connection established. Message queued for aditya@cyberdeck.eth</div>`;
                    // Here you'd send to Formspree or email API
                } else if (command.toLowerCase() === 'whoami') {
                    output.innerHTML += `<div class="response">aditya: AI/ML engineer, ethical hacker, web3 architect</div>`;
                } else {
                    output.innerHTML += `<div class="response">Command not recognized. Try: connect, whoami, help</div>`;
                }
                
                output.scrollTop = output.scrollHeight;
                input.value = '';
            }
        }
    });
}

// Web3 Wallet Connect (MetaMask tease)
function initWeb3() {
    const walletBtn = document.getElementById('wallet-btn');
    
    if (typeof window.ethereum !== 'undefined') {
        walletBtn.textContent = 'MetaMask Ready';
        walletBtn.style.background = 'var(--matrix-green)';
        
        walletBtn.addEventListener('click', async () => {
            try {
                const accounts = await window.ethereum.request({ 
                    method: 'eth_requestAccounts' 
                });
                walletBtn.innerHTML = `<i class="fas fa-check"></i> ${accounts[0].slice(0,6)}...`;
                // Here: Save address to localStorage, show Web3-gated content
            } catch (error) {
                console.error('Wallet connect failed:', error);
            }
        });
    }
}

// Navigation Active States
function initNav() {
    const links = document.querySelectorAll('.nav-link');
    const sections = document.querySelectorAll('section');
    
    ScrollTrigger.create({
        onUpdate: self => {
            sections.forEach((section, i) => {
                if (self.progress > i * 0.25) {
                    links.forEach(link => link.classList.remove('active'));
                    links[i].classList.add('active');
                }
            });
        }
    });
}
